cols <- palette(brewer.pal(8, "Dark2"))[t$Tissue]
cbind(colnames(t),cols)
heatmap.2(exprs(t)[idx,], trace="none", ColSideColors=cols, col=hmcol)
cols <- palette(brewer.pal(8, "Dark2"))[t$Tissue]
cbind(colnames(t),cols)
heatmap.2(exprs(t)[idx,], trace="none", ColSideColors=cols, col=hmcol)
install.packages("gplots")
library(gplots)
cols <- palette(brewer.pal(8, "Dark2"))[t$Tissue]
cbind(colnames(t),cols)
heatmap.2(exprs(t)[idx,], trace="none", ColSideColors=cols, col=hmcol)
x = cbind(1:12/6,rep(1:3,each=4),rep(1:3,times=4),12:1/6)
x
dist(x[1,], x[,2])
dist(x[,1], x[,2])
dist(x[,2], x[,4])
dist(x[,1], x[,4])
d = as.matrix(dist(rbind(x[1], x[4])))
d
dist(x[1], x[4])
dist(rbind(x[1], x[4]))
dist(rbind(x[2], x[4]))
dist(rbind(x[,2], x[,4]))
x = matrix(c(1,3,8,9,20,4,16,11,15,2,10,18,14,6,7,19,13,17,12,5),ncol=2)
x
k = kmeans(x, centers=x[1:3])
k = kmeans(x[,1], x[,2], centers=x[1:3])
x
k
k.cluster
k(cluster)
k[cluster]
k.cluster()
cluster(k)
k[0]
k[1]
k = kmeans(x[,1], x[,2], centers=x[1:3,])
k = kmeans(x, centers=x[1:3,])
k
k[1]
k[2]
k[3]
k
k[4]
k[5]
k[6]
k[7]
k
k[8]
k[9]
interval_averages = data.frame(interval=factor(), steps=factor())
Session.info()
session.info()
SessionInfo()
sessionInfo()
intervals = activity[which(activity[,2] == activity[4,2]),][3]
View(intervals)
View(intervals)
steps = activity[which(activity[,2] == activity[4,2]),][1]
View(steps)
View(steps)
interval_averages = data.frame(interval=factor(), steps=factor())
intervals
steps
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps)
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps[,1])
interval_averages = data.frame(interval=numeric(), steps=numeric())
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps[,1])
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps)
interval_averages = data.frame(interval=numeric(), steps=numeric(288))
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
View(interval_averages)
View(interval_averages)
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps)
View(interval_averages)
View(interval_averages)
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = activity[which(activity[,2] == activity[i,2]),][1]
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps)
}
View(interval_averages)
View(interval_averages)
length(unique(activity[,2])))
length(unique(activity[,2]))
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = activity[which(activity[,2] == activity[i,2]),][1]
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages[,2] + steps)
}
View(intervals)
View(intervals)
View(intervals)
View(intervals)
View(steps)
View(steps)
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
View(interval_averages)
View(interval_averages)
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = activity[which(activity[,2] == activity[i,2]),][1]
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps)
}
View(interval_averages)
View(interval_averages)
View(steps)
View(steps)
steps = activity[which(activity[,2] == activity[5,2]),][1]
View(steps)
View(steps)
View(activity)
View(activity)
steps = activity[ ((5-1) * 288) : ((5-1)*288) + 288, 1]
length(steps)
steps = activity[ ((5-1) * 288) : ( ((5-1)*288) + 288), 1]
length(steps)
length(intervals)
steps
steps = activity[ ((5-1) * 288) : ( ((5-1)*288) + 287), 1]
steps
length(steps)
length(intervals[1])
length(intervals[1,])
length(intervals[,1])
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1]
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps)}
steps = as.numeric(activity[ ((5-1) * 288) : ( ((5-1)*288) + 287), 1])
stpes
steps
length(steps)
steps = numeric(activity[ ((5-1) * 288) : ( ((5-1)*288) + 287), 1])
steps = activity[ ((5-1) * 288) : ( ((5-1)*288) + 287), 1]
list(steps)
c(steps)
vector(steps)
as.vector(steps)
length(as.vector(steps))
length(list(steps))
length(list(steps)[,1])
length(list(steps))
length(list(steps)[1])
length(list(steps)[1,])
length(list(steps)[1])
length(list(steps)[1,])
length(list(steps)[,1])
length(list(steps)[[1]])
legnth(interval[[1]])
length(interval[[1]])
length(intervals[[1]])
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1])
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps)}
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1])
steps = list(activity[ ((3-1) * 288) : ( ((3-1)*288) + 287), 1])
steps
str(steps)
as.numeric(steps)
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1])
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps)}
steps
length(steps)
length(steps[1])
length(steps[[1]])
steps = list(activity[ ((3-1) * 288) : ( ((3-1)*288) + 288), 1])
length(steps[[1]])
steps = list(activity[ ((3-1) * 288) : ( ((3-1)*288) + 287), 1])
length(steps[[1]])
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1])
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps[[1]])}
View(interval_averages)
View(interval_averages)
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 288), 1])
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps[[1]])}
interval_averages = data.frame(interval=numeric(288), steps=numeric(288))
for (i in 1:length(unique(activity[,2]))) {  # iterate over each unique date
# get all intervals corresponding to this date
intervals = activity[which(activity[,2] == activity[i,2]),][3]
# get all steps corresponding to this date
steps = list(activity[ ((i-1) * 288) : ( ((i-1)*288) + 287), 1])
# cumulatively build the steps count for each interval
# so we have a total to average at the end
interval_averages = data.frame(interval=intervals, steps=interval_averages$steps + steps[[1]])}
interval_averages[,2]
length(unique(activity[,2]))
interval_averages[,2] = interval_average[,2] / length(unique(activity[,2]))
interval_averages[,2] = interval_averages[,2] / length(unique(activity[,2]))
View(interval_averages)
View(interval_averages)
names(interval_averages)
names(interval_averages)[2] = "average_steps"
names(interval_averages)[2] = "average_steps"
names(interval_averages)[2] = "average_steps"
names(interval_averages)[2] = "average_steps"
names(interval_averages)
View(interval_averages)
View(interval_averages)
plot(interval_averages$interval, interval_averages$average_steps, type="l")
?label
?labels
labels(x = "Time Interval")
plot(interval_averages$interval, interval_averages$average_steps, type="l", xlab="Time Interval")
plot(interval_averages$interval, interval_averages$average_steps, type="l", xlab="Time Interval", ylab = "Average Number of steps")
geom_line()
ggplot(interval_averages, aes(x=interval, y = average_steps)) +
geom_line()
ggplot(interval_averages, aes(x=interval, y = average_steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Steps Tracked")
ggplot(interval_averages, aes(x=interval, y = average_steps)) +
geom_line() +
xlab("Interval (One at each 5-minute point") +
ylab("Average Steps Tracked")
activity_plot = ggplot(interval_averages, aes(x=interval, y = average_steps)) +
geom_line() +
xlab("Interval (One at each 5-minute point") +
ylab("Average Steps Tracked")
interval_plot = ggplot(interval_averages, aes(x=interval, y = average_steps)) +
geom_line() +
xlab("Interval (One at each 5-minute point") +
ylab("Average Steps Tracked")
print(interval_plot)
remove(activity_plot)
g = ggplot(mpg, aes(hwy, displ))
g + geom_point(alpha=1/3) +
facet_wrap(hwy ~ year) +
geom_smooth(method="lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Avenir", base_size=10) +
labs(x = expression("log" * PM[2.5])) +
labs(y = "hwy mpg") +
labs(title="Highway MPG by displacement")
xyplot(y~x | f, panel = function(x, y, ...)) {
panel.xyplot(x, y, ...)    ## First call the default panel funciton
panel.lmline(x, y, col=2)   ## Overlay a simple linear regression line
})
# Panel functions receive the x,y coordinate of the points in that plot
set.seed(10)
x = rnorm(100)
f = rep(0:1, each=50)
y = x + f - f * x + rnorm(100, sd=0.5)
f = factor(f, labels = c("Group 1", "Group 2"))
xyplot(y~x | f, layout = c(2, 1))
getwd()
activity_with_na = read.csv("./activity.csv", header=T);
?count
length(activity_with_na[activity_with_na[,1:3] == NA])
is.na(activity_with_na)
head(is.na(activity_with_na))
is.na(activity_with_na[1,1:3])
is.na(activity_with_na[1,1:3]) > 0
(is.na(activity_with_na[1,1:3])) > 0
size(is.na(activity_with_na[1,1:3]))
length(is.na(activity_with_na[1,1:3]))
sum(is.na(activity_with_na[1,1:3]))
na_count = 0
for (i in 1:nrows(activity_with_na)) {
if (sum(is.na(activity_with_na[i,1:3])) > 0 ) {
na_count = na_count + 1
}
}
for (i in 1:nrow(activity_with_na)) {
if (sum(is.na(activity_with_na[i,1:3])) > 0 ) {
na_count = na_count + 1
}
}
na_count
?pnorm
rnorm(100, 1100, 75)
rnorm(100, 1100, 75)[95]
pbinom(4)
pbinom(4, 6)
ppois(4, 6)
ppois(1, 6)
ppois(2, 6)
ppois(1, lambda=.5*5)
ppois(5, lambda=.5*5)
ppois(4, lambda=.5*5)
ppois(1, lambda=.5*5)
ppois(0, lambda=.5*5)
ppois(0, lambda=.5*5) + ppois(1, lambda=.5*5) + ppois(2, lambda=.5*5) + ppois(3, lambda=.5*5) + ppois(4, lambda=.5*5) + ppois(5, lambda=.5*5)
ppois(0, lambda=.5*5) + ppois(1, lambda=.5*5) + ppois(2, lambda=.5*5) + ppois(3, lambda=.5*5) + ppois(4, lambda=.5*5)
ppois(2, lambda=.5*5)
ppois(1, lambda=.5*5)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5, 1))
p = xyplot(Ozone ~ Wind, data=airquality) # Nothing happens!
print(p)        # Now it prints!
class(p)
library(nlme)
str(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
?panel.lmline
panel.text
?panel.points
?panel.lines
?panel.llines
p = xyplot(Ozone ~ Wind | factor(Month), data=airquality)
p
?trellis.par.set
?ggplot2
str(ggplot2)
qplot(Ozone, Wind, data=airquality, facets = .~ Month)
qplot(Ozone, Wind, data=airquality, facets = ~. Month)
qplot(Ozone, Wind, data=airquality, facets = .~ Month)
qplot(Wind, Ozone, data=airquality, facets = .~ Month)
qplot(votes, ratings, data=moview)
qplot(votes, ratings, data=movies)
qplot(votes, rating, data=movies)
geom_smooth()
stat_smooth("loess")
qplot(votes, rating, data=movies smooth="loess")
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies) + stats_smooth("loess")
library(ggplot2)
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies) + geom_smooth("loess")
qplot(votes, rating, data=movies) + geom_smooth()
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month)
?panel.lmline
?fill.na
View(activity_with_na)
is.na(activity[1,])
is.na(activity[,1])
steps = activity_with_na$steps
step_counts = activity_with_na$steps
remove(steps)
step_averages = interval_averages$average_steps
step_averages
activity_with_na$interval_averages = interval_averages$average_steps
View(activity_with_na)
step_counts[is.na(step_counts)]
step_counts[is.na(step_counts)] = step_averages
is.na(step_counts)
sum(is.na(step_counts))
sum(is.na(step_counts))
activity_with_na$steps = step_count
names(activity_with_na)
sum(is.na(activity_with_na$steps))
remove(activity_with_na$interval_averages)
names(activity_with_na) = names(activity_with_na[1:3])
names(activity_with_na)
activity_with_na = cbind(activity_with_na$steps, activity_with_na$date, activity_with_na$interval)
activity_with_na = data.frame(activity_with_na)
View(activity_with_na)
View(activity_with_na)
activity_with_na = read.csv("./activity.csv", header=T);
step_counts = activity_with_na$steps
step_averages = interval_averages$average_steps
sum(is.na(activity_with_na$steps))
step_counts[is.na(step_counts)] = step_averages
step_counts
sum(is.na(step_counts))
activity_with_na$steps = step_count
View(activity_with_na)
activity_with_na$steps = step_counts
sum(is.na(activity_with_na$steps))
View(activity_with_na)
View(activity_with_na)
interval_averages
View(interval_averages)
activity_with_na = read.csv("./activity.csv", header=T);
steps_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages)
steps_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
View(steps_counts)
step_counts[is.na(step_counts), 1]
step_counts[is.na(step_counts),]
step_counts[is.na(step_counts)]
step_counts = activity_with_na$steps
activity_with_na = read.csv("./activity.csv", header=T);
steps_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
step_counts[is.na(step_counts),]
step_counts[is.na(step_counts)]
step_counts$interval_average[is.na(step_counts)]
step_counts$interval_averages[is.na(step_counts)]
step_counts[is.na(step_counts)]
step_counts[is.na(step_counts)][,2]
step_counts[is.na(step_counts)][2]
step_counts[is.na(step_counts)][,2]
step_counts[step_counts[is.na(step_counts)],2]
[is.na(step_counts)]
is.na(step_counts)]
is.na(step_counts)
step_counts[is.na(step_counts)]
step_counts[step_counts[is.na(step_counts)],2]
?row.num
?row
?row
row(is.na(step_counts))
row(step_counts[is.na(step_counts)])
step_counts[is.na(step_counts)]
step_counts[is.na(step_counts)]
inicies?
""
?indicies
?index
?row
numrow
steps_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
steps_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
for i in (1:nrow(step_counts)) {
if is.na(step_counts[i,1]) {
step_counts[i,1] = step_counts[i,2]
}
}
for i in (1:nrow(step_counts)) {
if (is.na(step_counts[i,1])) {
step_counts[i,1] = step_counts[i,2]
}
}
step_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
for i in (1:nrow(step_counts)) {
if (is.na(step_counts[i,1])) {
step_counts[i,1] = step_counts[i,2]
}
}
for (i in 1:nrow(step_counts)) {
if (is.na(step_counts[i,1])) {
step_counts[i,1] = step_counts[i,2]
}
}
remove(steps_counts)
View(step_counts)
activity_with_na$steps = step_counts$steps
sum(is.na(activity_with_na$steps))
sum(is.na(step_counts$steps))
activity_with_na = read.csv("./activity.csv", header=T);
step_counts = data.frame(steps=activity_with_na$steps, interval_averages=interval_averages$average_steps)
for (i in 1:nrow(step_counts)) {
if (is.na(step_counts[i,1])) {
step_counts[i,1] = step_counts[i,2]
}
}
step_counts
sum(is.na(step_counts$steps))
activity_with_na$steps = step_counts$steps
sum(is.na(activity_with_na$steps))
View(activity_with_na)
?rep
rep(interval_averages$average_steps, 3)
rep(interval_averages$average_steps, length(unique(activity_with_na[,2]))
)
rep(interval_averages$average_steps, length(unique(activity_with_na[,2])))
int_avg_vec = rep(interval_averages$average_steps, length(unique(activity_with_na[,2])))
activity_with_na = read.csv("./activity.csv", header=T);
int_avg_vec = rep(interval_averages$average_steps, length(unique(activity_with_na[,2])))
step_counts = data.frame(steps=activity_with_na$steps, interval_averages=int_avg_vec)
for (i in 1:nrow(step_counts)) {
if (is.na(step_counts[i,1])) {
step_counts[i,1] = step_counts[i,2]
}
}
step_counts
step_counts
sum(is.na(step_counts$steps))
activity_with_na$steps = step_counts$steps
sum(is.na(activity_with_na$steps))
```
sum(is.na(activity_with_na$steps))
View(activity_with_na)
View(activity_with_na)
